# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import url_shorten_service_pb2 as url__shorten__service__pb2


class UrlShortenServiceStub(object):
    """clang-format off 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShortenUrl = channel.unary_unary(
                '/url_shorten_service.UrlShortenService/ShortenUrl',
                request_serializer=url__shorten__service__pb2.ShortenUrlRequest.SerializeToString,
                response_deserializer=url__shorten__service__pb2.ShortenUrlResponse.FromString,
                )
        self.RestoreUrl = channel.unary_unary(
                '/url_shorten_service.UrlShortenService/RestoreUrl',
                request_serializer=url__shorten__service__pb2.RestoreUrlRequest.SerializeToString,
                response_deserializer=url__shorten__service__pb2.RestoreUrlResponse.FromString,
                )


class UrlShortenServiceServicer(object):
    """clang-format off 
    """

    def ShortenUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UrlShortenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ShortenUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.ShortenUrl,
                    request_deserializer=url__shorten__service__pb2.ShortenUrlRequest.FromString,
                    response_serializer=url__shorten__service__pb2.ShortenUrlResponse.SerializeToString,
            ),
            'RestoreUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreUrl,
                    request_deserializer=url__shorten__service__pb2.RestoreUrlRequest.FromString,
                    response_serializer=url__shorten__service__pb2.RestoreUrlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'url_shorten_service.UrlShortenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UrlShortenService(object):
    """clang-format off 
    """

    @staticmethod
    def ShortenUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/url_shorten_service.UrlShortenService/ShortenUrl',
            url__shorten__service__pb2.ShortenUrlRequest.SerializeToString,
            url__shorten__service__pb2.ShortenUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/url_shorten_service.UrlShortenService/RestoreUrl',
            url__shorten__service__pb2.RestoreUrlRequest.SerializeToString,
            url__shorten__service__pb2.RestoreUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
